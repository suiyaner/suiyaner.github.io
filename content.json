{"meta":{"title":"Atlantis","subtitle":"","description":"","author":"绥焰儿","url":"http://suiyaner.github.io","root":"/"},"pages":[{"title":"","date":"2020-09-08T04:31:23.670Z","updated":"2020-09-08T04:31:18.638Z","comments":true,"path":"404.html","permalink":"http://suiyaner.github.io/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"","date":"2020-09-08T04:29:34.529Z","updated":"2020-09-08T04:29:27.491Z","comments":true,"path":"about/index.html","permalink":"http://suiyaner.github.io/about/index.html","excerpt":"","text":"下面写关于自己的内容"},{"title":"","date":"2020-09-08T04:30:28.231Z","updated":"2020-09-08T04:30:23.766Z","comments":true,"path":"mylist/index.html","permalink":"http://suiyaner.github.io/mylist/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2020-09-08T04:29:08.559Z","updated":"2020-09-08T04:28:59.888Z","comments":true,"path":"categories/index.html","permalink":"http://suiyaner.github.io/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-09-08T04:30:06.899Z","updated":"2020-09-08T04:29:59.044Z","comments":true,"path":"tags/index.html","permalink":"http://suiyaner.github.io/tags/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2020-09-08T04:30:48.754Z","updated":"2020-09-08T04:30:44.063Z","comments":true,"path":"friends/index.html","permalink":"http://suiyaner.github.io/friends/index.html","excerpt":"这里写友链上方的内容。","text":"这里写友链上方的内容。 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"}],"posts":[{"title":"SpirngBoot整合Mybatis-Plus","slug":"SpirngBoot整合Mybatis-Plus","date":"2020-06-24T23:23:37.000Z","updated":"2020-09-08T04:39:53.648Z","comments":true,"path":"2020/06/25/SpirngBoot整合Mybatis-Plus/","link":"","permalink":"http://suiyaner.github.io/2020/06/25/SpirngBoot%E6%95%B4%E5%90%88Mybatis-Plus/","excerpt":"这是一篇关于Mybatis-Plus的配置教程","text":"这是一篇关于Mybatis-Plus的配置教程 导入Maven包 这里的生成器模板引擎使用的是默认的Velocity模板引擎,可以根据需要自行更换模板 1234567891011121314151617181920&lt;!-- Mybatis Plus Start --&gt;&lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt; &lt;version&gt;3.3.2&lt;/version&gt;&lt;/dependency&gt;&lt;!-- End --&gt;&lt;!-- Mybatis Plus Generator Start --&gt;&lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt; &lt;version&gt;3.3.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt; &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt; &lt;version&gt;2.2&lt;/version&gt;&lt;/dependency&gt;&lt;!-- End --&gt; Application.yml配置 此配置可以自行选择是否使用. 就算Application.yml里面不添加以下代码,也可正常使用. 显示SQL语句可以在调用CRUD接口的时候显示调用的SQL语句. 逻辑删除是在用户中添置一项逻辑删除的参数,当为0是正常使用,为1时则被删除. @注:逻辑删除的本质是Update操作,逻辑删除并不是真正意义上的的删除操作，而是在把表中代表是否删除的字段 修改为删除状态,在逻辑数据上是被删除的,但是其数据依然存在于数据库中,只是在各种查询中查不到该用户. 123456789mybatis-plus: configuration: #显示SQL语句 log-impl: org.apache.ibatis.logging.stdout.StdOutImpl global-config: db-config: logic-not-delete-value: 0 #逻辑删除 未被删除 logic-delete-value: 1 #逻辑删除 已被删除 mapper-locations: classpath:Mapper/*Mapper.xml //Mapper.xml文件路径 启动类添加注解1234//扫描mapper包 是mapper包,不是文件夹,继承了BaseMapper类的.java文件@MapperScan(&quot;com.admin.mapper&quot;) Generator生成器配置 Velocity模板引擎生成器配置方案,可以根据需要自行配置 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import com.baomidou.mybatisplus.annotation.DbType;import com.baomidou.mybatisplus.annotation.IdType;import com.baomidou.mybatisplus.generator.AutoGenerator;import com.baomidou.mybatisplus.generator.config.*;import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;public class Generator &#123; public static void main(String[] args) &#123; //创建Generator对象 AutoGenerator autoGenerator = new AutoGenerator(); //数据源 DataSourceConfig dataSourceConfig = new DataSourceConfig(); dataSourceConfig.setDbType(DbType.MYSQL); //数据库类型 dataSourceConfig.setDriverName(&quot;com.mysql.cj.jdbc.Driver&quot;); //数据库驱动 dataSourceConfig.setUrl(&quot;jdbc:mysql://localhost:3306/heroes?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&amp;serverTimezone=GMT&quot;); dataSourceConfig.setUsername(&quot;root&quot;); //用户名 dataSourceConfig.setPassword(&quot;root&quot;); //密码 autoGenerator.setDataSource(dataSourceConfig); //全局配置 GlobalConfig globalConfig = new GlobalConfig(); globalConfig.setOutputDir(System.getProperty(&quot;user.dir&quot;)+&quot;/src/main/java&quot;); //创建路径 globalConfig.setOpen(false); //创建完成后自动打开文件夹 globalConfig.setAuthor(&quot;绥焰儿&quot;); //作者 globalConfig.setServiceName(&quot;%sService&quot;); //去除IService的I globalConfig.setIdType(IdType.AUTO); //设置ID自增 globalConfig.setBaseResultMap(true); //XML生成ResultMap globalConfig.setSwagger2(true);//生成Swagger2注解 autoGenerator.setGlobalConfig(globalConfig); //包信息 PackageConfig packageConfig = new PackageConfig(); packageConfig.setParent(&quot;com.project&quot;); //父包 packageConfig.setModuleName(&quot;generator&quot;); //生成的文件存放的包名 packageConfig.setController(&quot;controller&quot;); //controller的包名 packageConfig.setService(&quot;service&quot;); //生成的service文件夹名称 packageConfig.setServiceImpl(&quot;service.impl&quot;); //生成的service下的impl文件夹的名称 packageConfig.setMapper(&quot;mapper&quot;); //生成的mapper文件夹名称 packageConfig.setEntity(&quot;entity&quot;); //生成的entity名称 autoGenerator.setPackageInfo(packageConfig); //配置策略 StrategyConfig strategyConfig = new StrategyConfig(); strategyConfig.setEntityLombokModel(true); //启用LomBok strategyConfig.setRestControllerStyle(true); //生成RestController strategyConfig.setEntityTableFieldAnnotationEnable(true); //生成实体时，生成字段注解 strategyConfig.setNaming(NamingStrategy.underline_to_camel); //启用下划线转驼峰命名法 strategyConfig.setColumnNaming(NamingStrategy.underline_to_camel); //启用下划线转驼峰命名法 autoGenerator.setStrategy(strategyConfig); autoGenerator.execute(); &#125;&#125; @TableName 注解表名注解 value 表名 schema keepGlobalPrefix 是否保持使用全局的 tablePrefix 的值(如果设置了全局 tablePrefix 且自行设置了 value 的值) resultMap xml 中 resultMap 的 id autoResultMap 是否自动构建 resultMap 并使用(如果设置 resultMap 则不会进行 resultMap 的自动构建并注入) 12345678@TableName(value = &quot;hero_user&quot;)public class User implements Serializable &#123;//...略&#125; @TableId 注解用来设置主键ID value 字段名 type 主键类型 12@TableId(value = &quot;User_Id&quot;, type = IdType.AUTO)private Long userId; @TableField 注解字段注解(非主键) value 字段名 …略 12@TableField(&quot;User_Name&quot;)private String userName; @TableLogic 注解表字段逻辑处理注解（逻辑删除） value 字段名 delval 逻辑删除值 (已在yml配置过,无需配置) 123@TableLogic@TableField(&quot;User_Deleted&quot;)private int userDeleted; 至于@Verision(乐观锁),@EnumValue(通枚举类注解)等自行查看官方文档 Mybatis-Plus 注解","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://suiyaner.github.io/tags/SpringBoot/"},{"name":"Mybatis-Plus","slug":"Mybatis-Plus","permalink":"http://suiyaner.github.io/tags/Mybatis-Plus/"}]}],"categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://suiyaner.github.io/tags/SpringBoot/"},{"name":"Mybatis-Plus","slug":"Mybatis-Plus","permalink":"http://suiyaner.github.io/tags/Mybatis-Plus/"}]}