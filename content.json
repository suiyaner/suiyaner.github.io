{"meta":{"title":"Atlantis","subtitle":"","description":"","author":"绥焰儿","url":"http://suiyaner.github.io","root":"/"},"pages":[{"title":"","date":"2020-09-08T04:31:23.670Z","updated":"2020-09-08T04:31:18.638Z","comments":true,"path":"404.html","permalink":"http://suiyaner.github.io/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"所有分类","date":"2020-09-08T04:29:08.559Z","updated":"2020-09-08T04:28:59.888Z","comments":true,"path":"categories/index.html","permalink":"http://suiyaner.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2020-09-08T04:29:34.529Z","updated":"2020-09-08T04:29:27.491Z","comments":true,"path":"about/index.html","permalink":"http://suiyaner.github.io/about/index.html","excerpt":"","text":"下面写关于自己的内容"},{"title":"所有标签","date":"2020-09-08T04:30:06.899Z","updated":"2020-09-08T04:29:59.044Z","comments":true,"path":"tags/index.html","permalink":"http://suiyaner.github.io/tags/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-09-08T05:33:35.797Z","updated":"2020-09-08T05:33:35.797Z","comments":true,"path":"friends/index.html","permalink":"http://suiyaner.github.io/friends/index.html","excerpt":"欢迎留言","text":"欢迎留言"},{"title":"","date":"2020-09-08T04:30:28.231Z","updated":"2020-09-08T04:30:23.766Z","comments":true,"path":"mylist/index.html","permalink":"http://suiyaner.github.io/mylist/index.html","excerpt":"","text":""}],"posts":[{"title":"RedisTemplate使用笔记","slug":"RedisTemplate","date":"2020-09-25T08:57:12.000Z","updated":"2020-09-25T08:57:23.423Z","comments":true,"path":"2020/09/25/RedisTemplate/","link":"","permalink":"http://suiyaner.github.io/2020/09/25/RedisTemplate/","excerpt":"RedisTemplate基于Jedis高度封装的redis操作框架","text":"RedisTemplate基于Jedis高度封装的redis操作框架 POM.xml 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;&lt;/dependency&gt; 解决存入Redis乱码 存储前一定要进行非空验证，否则会出现一个深度为一万且除了清除所有Redis数据外无法删除的空文件夹，且文字乱码 PS:这里的乱码无论是中文还是英文都会乱码 主要形式为unicode格式 然后在一个添加了@Configuration 配置类下或启动类中，进行如下操作。 这项操作是为了把key和value进行序列化操作时，由默认的RedisSerializer改为StringRedisSerializer和GenericJackson2JsonRedisSerializer。 1234567891011@Autowiredprivate RedisTemplate redisTemplate;@Beanpublic RedisTemplate redisTemplateInit() &#123; //设置序列化Key的实例化对象 redisTemplate.setKeySerializer(new StringRedisSerializer()); //设置序列化Value的实例化对象 redisTemplate.setValueSerializer(new GenericJackson2JsonRedisSerializer()); return redisTemplate;&#125; 使用示例 123456789101112131415161718public ServerResponse getVillageByRange(double longitude, double latitude)&#123; //这里加冒号的在redis中会变成一个文件夹 如: village/1,1 String key = new String(&quot;village:&quot;+longitude+&#x27;,&#x27;+latitude); //判断是否寻找到指定key redis缓存 Set members = redisTemplate.opsForSet().members(key); if(members.size()!=0)&#123; return ServerResponse.createBySuccess(members); &#125; SortedSet&lt;AppVillageVo&gt; neighPosition = findNeighPosition(longitude, latitude); if(neighPosition.size()==0)&#123; return ServerResponse.createByErrorMessage(&quot;查找范围出错.&quot;); &#125; //添加reids redisTemplate.opsForSet().add(key,neighPosition); //设置redis过期时间为3天 redisTemplate.expire(key,3, TimeUnit.DAYS); return ServerResponse.createBySuccess(neighPosition);&#125;","categories":[],"tags":[{"name":"Redis","slug":"Redis","permalink":"http://suiyaner.github.io/tags/Redis/"},{"name":"RedisTemplate","slug":"RedisTemplate","permalink":"http://suiyaner.github.io/tags/RedisTemplate/"},{"name":"Jedis","slug":"Jedis","permalink":"http://suiyaner.github.io/tags/Jedis/"}]},{"title":"Shiro学习笔记","slug":"Shiro","date":"2020-09-24T03:57:24.000Z","updated":"2020-09-25T09:00:41.332Z","comments":true,"path":"2020/09/24/Shiro/","link":"","permalink":"http://suiyaner.github.io/2020/09/24/Shiro/","excerpt":"1.Shiro什么是Shiro官网 Shiro是一款主流的Java安全框架，不依赖任何容器，可以运行在Java SE和Java EE项目中 ，它的主要作用是对访问系统的用户进行身份认证、授权、会话管理、加密登操作。","text":"1.Shiro什么是Shiro官网 Shiro是一款主流的Java安全框架，不依赖任何容器，可以运行在Java SE和Java EE项目中 ，它的主要作用是对访问系统的用户进行身份认证、授权、会话管理、加密登操作。 2.Shiro核心组件 用户、角色、权限 会给角色赋予权限，给用户赋予角色。 运行机制流程图 3.SpringBoot 集成ShiroMaven12345&lt;dependency&gt; &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt; &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt; &lt;version&gt;1.5.3&lt;/version&gt;&lt;/dependency&gt; Realm实现 继承AuthorizingRealm 123456789101112131415161718192021222324252627282930313233343536373839404142import com.suiyaner.entity.User;import com.suiyaner.service.UserService;import org.apache.shiro.authc.*;import org.apache.shiro.authz.AuthorizationInfo;import org.apache.shiro.realm.AuthorizingRealm;import org.apache.shiro.subject.PrincipalCollection;import org.springframework.beans.factory.annotation.Autowired;public class UserRealm extends AuthorizingRealm &#123; @Autowired private UserService userService; /** * 授权 * @param principalCollection * @return */ @Override protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123; return null; &#125; /** * 认证 * @param authenticationToken * @return * @throws AuthenticationException */ @Override protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123; //客户端传送过来的用户名密码 UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) authenticationToken; //根据Token中的用户名在数据库中查找 User user = userService.findUserByName(usernamePasswordToken.getUsername()); if (user != null) &#123; //验证密码 return new SimpleAuthenticationInfo(user,user.getPassword(),getName()); &#125; return null; &#125;&#125; Config配置类配置 Qualifier 寻找方法类 12345678910111213141516171819202122232425262728293031323334353637383940import com.suiyaner.realm.UserRealm;import org.apache.shiro.spring.web.ShiroFilterFactoryBean;import org.apache.shiro.web.mgt.DefaultWebSecurityManager;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;@Configurationpublic class ShiroConfig &#123; @Bean public UserRealm userRealm()&#123; return new UserRealm(); &#125; @Bean public DefaultWebSecurityManager defaultWebSecurityManager(@Qualifier(&quot;userRealm&quot;) UserRealm userRealm)&#123; DefaultWebSecurityManager defaultWebSecurityManager = new DefaultWebSecurityManager(); defaultWebSecurityManager.setRealm(userRealm); return defaultWebSecurityManager; &#125; @Bean public ShiroFilterFactoryBean shiroFilterFactoryBean(@Qualifier(&quot;defaultWebSecurityManager&quot;) DefaultWebSecurityManager defaultWebSecurityManager)&#123; ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean(); shiroFilterFactoryBean.setSecurityManager(defaultWebSecurityManager); //权限设置 Map&lt;String,String&gt; map = new Hashtable&lt;&gt;(); map.put(&quot;/main&quot;,&quot;authuc&quot;); // 必须登录状态 map.put(&quot;/manager&quot;,&quot;perms[manager]&quot;); //必须拥有manager权限 map.put(&quot;/administrator&quot;,&quot;roles[administrator]&quot;); //必须是administrator角色 shiroFilterFactoryBean.setFilterChainDefinitionMap(map); //把map添加进shiroFilterFactoryBean //修改登录页面 shiroFilterFactoryBean.setLoginUrl(&quot;/login&quot;); //设置未授权页面 shiroFilterFactoryBean.setUnauthorizedUrl(&quot;/unauth&quot;); return shiroFilterFactoryBean; &#125;&#125; 编写认证和授权规则： 认证过滤器 anon：无需认证。 authc：必须认证。 authcBasic：需要通过 HTTPBasic 认证。 user：不一定通过认证，只要曾经被 Shiro 记录即可，比如：记住我。 授权过滤器 perms：必须拥有某个权限才能访问。 role：必须拥有某个角色才能访问。 port：请求的端口必须是指定值才可以。 rest：请求必须基于 RESTful，POST、PUT、GET、DELETE。 ssl：必须是安全的 URL 请求，协议 HTTPS。 创建 3 个页面，main.html、manage.html、administrator.html 访问权限如下： 1、必须登录才能访问 main.html 2、当前用户必须拥有 manage 授权才能访问 manage.html 3、当前用户必须拥有 administrator 角色才能访问 administrator.html Login实现1234567891011121314151617181920212223242526272829303132@PostMapping(&quot;/login&quot;)public String login(String username, String password, Model model)&#123; Subject subject = SecurityUtils.getSubject(); UsernamePasswordToken token = new UsernamePasswordToken(username,password); try &#123; subject.login(token); User user = (User) subject.getPrincipal(); subject.getSession().setAttribute(&quot;user&quot;,user); return &quot;index&quot;; &#125; catch (UnknownAccountException e) &#123; e.printStackTrace(); model.addAttribute(&quot;msg&quot;,&quot;用户名错误！&quot;); return &quot;login&quot;; &#125; catch (IncorrectCredentialsException e)&#123; model.addAttribute(&quot;msg&quot;,&quot;密码错误！&quot;); e.printStackTrace(); return &quot;login&quot;; &#125;&#125; @GetMapping(&quot;/unauth&quot;)@ResponseBodypublic String unauth()&#123; return &quot;未授权，无法访问！&quot;;&#125; @GetMapping(&quot;/logout&quot;)public String logout()&#123; Subject subject = SecurityUtils.getSubject(); subject.logout(); return &quot;login&quot;;&#125; Shiro 整合 Thymeleaf 1、pom.xml 引入依赖 12345&lt;dependency&gt; &lt;groupId&gt;com.github.theborakompanioni&lt;/groupId&gt; &lt;artifactId&gt;thymeleaf-extras-shiro&lt;/artifactId&gt; &lt;version&gt;2.0.0&lt;/version&gt;&lt;/dependency&gt; 2、配置类添加 ShiroDialect 1234@Beanpublic ShiroDialect shiroDialect()&#123; return new ShiroDialect();&#125; 3、index.html 123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot; xmlns:shiro=&quot;http://www.thymeleaf.org/thymeleaf-extras-shiro&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;link rel=&quot;shortcut icon&quot; href=&quot;#&quot;/&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;index&lt;/h1&gt; &lt;div th:if=&quot;$&#123;session.account != null&#125;&quot;&gt; &lt;span th:text=&quot;$&#123;session.account.username&#125;+&#x27;欢迎回来！&#x27;&quot;&gt;&lt;/span&gt;&lt;a href=&quot;/logout&quot;&gt;退出&lt;/a&gt; &lt;/div&gt; &lt;a href=&quot;/main&quot;&gt;main&lt;/a&gt; &lt;br/&gt; &lt;div shiro:hasPermission=&quot;manage&quot;&gt; &lt;a href=&quot;manage&quot;&gt;manage&lt;/a&gt; &lt;br/&gt; &lt;/div&gt; &lt;div shiro:hasRole=&quot;administrator&quot;&gt; &lt;a href=&quot;/administrator&quot;&gt;administrator&lt;/a&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;","categories":[],"tags":[{"name":"Shiro","slug":"Shiro","permalink":"http://suiyaner.github.io/tags/Shiro/"},{"name":"权限","slug":"权限","permalink":"http://suiyaner.github.io/tags/%E6%9D%83%E9%99%90/"}]},{"title":"SpirngBoot整合Mybatis-Plus","slug":"SpirngBoot整合Mybatis-Plus","date":"2020-06-24T23:23:37.000Z","updated":"2020-09-08T04:39:53.648Z","comments":true,"path":"2020/06/25/SpirngBoot整合Mybatis-Plus/","link":"","permalink":"http://suiyaner.github.io/2020/06/25/SpirngBoot%E6%95%B4%E5%90%88Mybatis-Plus/","excerpt":"这是一篇关于Mybatis-Plus的配置教程","text":"这是一篇关于Mybatis-Plus的配置教程 导入Maven包 这里的生成器模板引擎使用的是默认的Velocity模板引擎,可以根据需要自行更换模板 1234567891011121314151617181920&lt;!-- Mybatis Plus Start --&gt;&lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt; &lt;version&gt;3.3.2&lt;/version&gt;&lt;/dependency&gt;&lt;!-- End --&gt;&lt;!-- Mybatis Plus Generator Start --&gt;&lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt; &lt;version&gt;3.3.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt; &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt; &lt;version&gt;2.2&lt;/version&gt;&lt;/dependency&gt;&lt;!-- End --&gt; Application.yml配置 此配置可以自行选择是否使用. 就算Application.yml里面不添加以下代码,也可正常使用. 显示SQL语句可以在调用CRUD接口的时候显示调用的SQL语句. 逻辑删除是在用户中添置一项逻辑删除的参数,当为0是正常使用,为1时则被删除. @注:逻辑删除的本质是Update操作,逻辑删除并不是真正意义上的的删除操作，而是在把表中代表是否删除的字段 修改为删除状态,在逻辑数据上是被删除的,但是其数据依然存在于数据库中,只是在各种查询中查不到该用户. 123456789mybatis-plus: configuration: #显示SQL语句 log-impl: org.apache.ibatis.logging.stdout.StdOutImpl global-config: db-config: logic-not-delete-value: 0 #逻辑删除 未被删除 logic-delete-value: 1 #逻辑删除 已被删除 mapper-locations: classpath:Mapper/*Mapper.xml //Mapper.xml文件路径 启动类添加注解1234//扫描mapper包 是mapper包,不是文件夹,继承了BaseMapper类的.java文件@MapperScan(&quot;com.admin.mapper&quot;) Generator生成器配置 Velocity模板引擎生成器配置方案,可以根据需要自行配置 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import com.baomidou.mybatisplus.annotation.DbType;import com.baomidou.mybatisplus.annotation.IdType;import com.baomidou.mybatisplus.generator.AutoGenerator;import com.baomidou.mybatisplus.generator.config.*;import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;public class Generator &#123; public static void main(String[] args) &#123; //创建Generator对象 AutoGenerator autoGenerator = new AutoGenerator(); //数据源 DataSourceConfig dataSourceConfig = new DataSourceConfig(); dataSourceConfig.setDbType(DbType.MYSQL); //数据库类型 dataSourceConfig.setDriverName(&quot;com.mysql.cj.jdbc.Driver&quot;); //数据库驱动 dataSourceConfig.setUrl(&quot;jdbc:mysql://localhost:3306/heroes?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&amp;serverTimezone=GMT&quot;); dataSourceConfig.setUsername(&quot;root&quot;); //用户名 dataSourceConfig.setPassword(&quot;root&quot;); //密码 autoGenerator.setDataSource(dataSourceConfig); //全局配置 GlobalConfig globalConfig = new GlobalConfig(); globalConfig.setOutputDir(System.getProperty(&quot;user.dir&quot;)+&quot;/src/main/java&quot;); //创建路径 globalConfig.setOpen(false); //创建完成后自动打开文件夹 globalConfig.setAuthor(&quot;绥焰儿&quot;); //作者 globalConfig.setServiceName(&quot;%sService&quot;); //去除IService的I globalConfig.setIdType(IdType.AUTO); //设置ID自增 globalConfig.setBaseResultMap(true); //XML生成ResultMap globalConfig.setSwagger2(true);//生成Swagger2注解 autoGenerator.setGlobalConfig(globalConfig); //包信息 PackageConfig packageConfig = new PackageConfig(); packageConfig.setParent(&quot;com.project&quot;); //父包 packageConfig.setModuleName(&quot;generator&quot;); //生成的文件存放的包名 packageConfig.setController(&quot;controller&quot;); //controller的包名 packageConfig.setService(&quot;service&quot;); //生成的service文件夹名称 packageConfig.setServiceImpl(&quot;service.impl&quot;); //生成的service下的impl文件夹的名称 packageConfig.setMapper(&quot;mapper&quot;); //生成的mapper文件夹名称 packageConfig.setEntity(&quot;entity&quot;); //生成的entity名称 autoGenerator.setPackageInfo(packageConfig); //配置策略 StrategyConfig strategyConfig = new StrategyConfig(); strategyConfig.setEntityLombokModel(true); //启用LomBok strategyConfig.setRestControllerStyle(true); //生成RestController strategyConfig.setEntityTableFieldAnnotationEnable(true); //生成实体时，生成字段注解 strategyConfig.setNaming(NamingStrategy.underline_to_camel); //启用下划线转驼峰命名法 strategyConfig.setColumnNaming(NamingStrategy.underline_to_camel); //启用下划线转驼峰命名法 autoGenerator.setStrategy(strategyConfig); autoGenerator.execute(); &#125;&#125; @TableName 注解表名注解 value 表名 schema keepGlobalPrefix 是否保持使用全局的 tablePrefix 的值(如果设置了全局 tablePrefix 且自行设置了 value 的值) resultMap xml 中 resultMap 的 id autoResultMap 是否自动构建 resultMap 并使用(如果设置 resultMap 则不会进行 resultMap 的自动构建并注入) 12345678@TableName(value = &quot;hero_user&quot;)public class User implements Serializable &#123;//...略&#125; @TableId 注解用来设置主键ID value 字段名 type 主键类型 12@TableId(value = &quot;User_Id&quot;, type = IdType.AUTO)private Long userId; @TableField 注解字段注解(非主键) value 字段名 …略 12@TableField(&quot;User_Name&quot;)private String userName; @TableLogic 注解表字段逻辑处理注解（逻辑删除） value 字段名 delval 逻辑删除值 (已在yml配置过,无需配置) 123@TableLogic@TableField(&quot;User_Deleted&quot;)private int userDeleted; 至于@Verision(乐观锁),@EnumValue(通枚举类注解)等自行查看官方文档 Mybatis-Plus 注解","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://suiyaner.github.io/tags/SpringBoot/"},{"name":"Mybatis-Plus","slug":"Mybatis-Plus","permalink":"http://suiyaner.github.io/tags/Mybatis-Plus/"}]}],"categories":[],"tags":[{"name":"Redis","slug":"Redis","permalink":"http://suiyaner.github.io/tags/Redis/"},{"name":"RedisTemplate","slug":"RedisTemplate","permalink":"http://suiyaner.github.io/tags/RedisTemplate/"},{"name":"Jedis","slug":"Jedis","permalink":"http://suiyaner.github.io/tags/Jedis/"},{"name":"Shiro","slug":"Shiro","permalink":"http://suiyaner.github.io/tags/Shiro/"},{"name":"权限","slug":"权限","permalink":"http://suiyaner.github.io/tags/%E6%9D%83%E9%99%90/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://suiyaner.github.io/tags/SpringBoot/"},{"name":"Mybatis-Plus","slug":"Mybatis-Plus","permalink":"http://suiyaner.github.io/tags/Mybatis-Plus/"}]}